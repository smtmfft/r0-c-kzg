// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use c_kzg_taiko::{Blob, KzgCommitment, KzgSettings};
use methods::{HELLO_GUEST_ELF, HELLO_GUEST_ID};
use rand::prelude::*;
use rand::rngs::ThreadRng;
use risc0_zkvm::{default_prover, ExecutorEnv};
use sha2::{Digest, Sha256};
use std::io::Write;
mod kzg_trust_setup;
mod kzg_utils;

use kzg_trust_setup::KZG_TRUST_SETUP;
use kzg_utils::parse_kzg_trusted_setup;

const KZG_TRUST_SETUP_DATA: &[u8] = include_bytes!("../../kzg_settings_raw.bin");
const DEBUG_INPUT_BLOB: &[u8] = include_bytes!("../../debug-input.bin");

pub const VERSIONED_HASH_VERSION_KZG: u8 = 0x01;

pub fn kzg_to_versioned_hash(commitment: &KzgCommitment) -> [u8; 32] {
    let mut res = Sha256::digest(commitment.as_slice());
    res[0] = VERSIONED_HASH_VERSION_KZG;
    res.into()
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut input: Vec<u8> = [0; 4096 * 32].into();
    // let mut rng = thread_rng();
    // let num_elems: usize = std::env::var("NB")
    //     .map(|v| v.parse::<usize>().unwrap_or_else(|_| 4096usize))
    //     .unwrap_or_else(|_| 4096usize);
    // for i in 0..num_elems*32 {
    //     if i % 32 != 0 {
    //         let random_byte: u8 = rng.gen();
    //         input[i] = random_byte;
    //     }
    // }

    // copy debug-input into input
    input.copy_from_slice(DEBUG_INPUT_BLOB);
    // calculate hash of input
    println!(
        "hash input = {:?}",
        hex::encode(Sha256::digest(input.as_slice()))
    );

    // let (g1, g2) = parse_kzg_trusted_setup(&KZG_TRUST_SETUP).unwrap();
    // let kzg_settings = KzgSettings::load_trusted_setup(&g1.0, &g2.0).unwrap();
    let mut data = KZG_TRUST_SETUP_DATA.to_owned().clone();
    let kzg_settings = KzgSettings::from_u8_slice(&mut data);
    let kzg_commit = KzgCommitment::blob_to_kzg_commitment(
        &Blob::from_bytes(&input.as_slice()).unwrap(),
        &kzg_settings,
    )
    .unwrap();
    let versioned_hash = kzg_to_versioned_hash(&kzg_commit);
    println!("kzg_commit: {:?}", hex::encode(kzg_commit.as_slice()));
    println!("versioned_hash: {:?}", hex::encode(versioned_hash));

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().
    let env = ExecutorEnv::builder().write_slice(&input).build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, HELLO_GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(HELLO_GUEST_ID).unwrap();
}
